/*
 * Copyright (C) 2018 Hortonworks Inc.
 *
 * Licenced under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.dtest.core;

import org.dtest.core.mvn.MavenResultAnalyzer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class HtmlReporter extends Reporter {
  private Map<String, String> logLinks; // HTML links to the logs, need to be

  public HtmlReporter() {
    this.logLinks = new ConcurrentHashMap<>();
  }

  @Override
  public File getLogDirForContainer(ContainerResult result) throws IOException {
    // Don't actually create the directory, we'll do that lazily.
    return new File(buildInfo.getBuildDir(), result.getCmd().containerSuffix());
  }

  @Override
  public void addFailedTests(ContainerClient docker, ContainerResult result) throws IOException {
    Map<String, Set<File>> reportsFromFailedTests = result.getReports().getKeptFiles();
    if (!reportsFromFailedTests.isEmpty()) {
      for (String testName : reportsFromFailedTests.keySet()) {
        // If it's a timeout we need to rename it because every timeout from every container
        // has the same testName.  See MavenResultAnalyzer.TIMED_OUT_KEY for why.
        String key = testName.equals(MavenResultAnalyzer.TIMED_OUT_KEY) ?
            result.getCmd().containerSuffix() + " timed out" : testName;
        logLinks.put(key, result.getCmd().containerSuffix());
      }
      // The logs will already have been moved in by DockerTest
      // grab the part of the dtest.log relevant to this test and store it here as well
      boolean copiedDTest = true;
      try {
        BufferedReader reader = new BufferedReader(new FileReader(new File(buildInfo.getBuildDir(), "dtest.log")));
        FileWriter dtestWriter = new FileWriter(new File(result.getReports().getReportDir(), "dtest.log"));
        String line;
        while ((line = reader.readLine()) != null) {
          if (line.contains(result.getCmd().containerSuffix())) dtestWriter.write(line + "\n");
        }
        reader.close();
        dtestWriter.close();
      } catch (FileNotFoundException e) {
        // This happens in tests, don't die over it
        log.warn("Unable to find dtest.log to copy relevant part for this failed test");
        copiedDTest = false;
      }
      // Create an index.html file in the target directory so that Jenkins can display them
      FileWriter writer = new FileWriter(new File(result.getReports().getReportDir(), "index.html"));
      writer.write("<html>\n");
      writer.write("<head>\n");
      writer.write("<title>" + result.getCmd().containerSuffix() + "</title>\n");
      writer.write("</head>\n");
      writer.write("<body>\n");
      writer.write("<h1>Log Files</h1>\n");
      writer.write("<ul>\n");
      for (Set<File> files : reportsFromFailedTests.values()) {
        for (File f : files) {
          writer.write("<li><a href=\"" + f.getName() + "\">" + f.getName() + "</a></li>\n");
        }
      }
      writer.write("</ul>\n");
      if (copiedDTest) {
        writer.write("<p>Section of logfile generated by this container: <a href=\"dtest.log\">dtest.log</a></p>");
      }
      writer.write("</body>\n");
      writer.write("</html>\n");
      writer.close();
    }
  }

  @Override
  public void publish() throws IOException {
    FileWriter writer = new FileWriter(new File(buildInfo.getBuildDir(), "index.html"));
    writer.write("<html>\n");
    writer.write("<head>\n");
    writer.write("<title>Docker Test</title>\n");
    writer.write("</head>\n");
    writer.write("<body>\n");
    writer.write("<h1>Status:  " + status + "</h1>\n");
    writer.write("<p>Repository:  " + repo + "</p>\n");
    writer.write("<p>Branch:  " + branch + "</p>\n");
    writer.write("<p>Profile:  " + profile + "</p>\n");
    writer.write("<p><b>Counts:  Succeeded:  " + numSucceeded + ", Errors:  " + numErrors + ", Failures:  " + numFailures + "</b></p>\n");
    if (logLinks.size() > 0) {
      writer.write("<p>Links to logfiles for tests with errors, failures, or timeout:</p>\n");
      writer.write("<ul>\n");
      for (Map.Entry<String, String> e : logLinks.entrySet()) {
        writer.write("<li>" + e.getKey() + "  <a href=\"" + e.getValue() + "\">" + e.getValue() + "</a></li>\n");
      }
      writer.write("</ul>\n");
    }
    writer.write("<p>Logfile from build: <a href=\"dtest.log\">dtest.log</a></p>\n");
    writer.write("<p>Dockerfile used for build: <a href=\"Dockerfile\">Dockerfile</a></p>\n");
    writer.write("</body>\n");
    writer.write("</html>\n");
    writer.close();

  }
}
