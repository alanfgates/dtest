<?xml version="1.0"?>
<!--
Copyright (C) 2018 Hortonworks Inc.

Licenced under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.dtest</groupId>
  <artifactId>dtest</artifactId>
  <version>0.2-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>Docker Test Utility</name>
  <url>https://github.com/alanfgates/dtest</url>
  <description>Docker Test is a utility for testing large projects in parallel using Docker.  If your project
  has unit tests that need > 10 minutes to run because there are a so many, you can use this tool to break up
  the test execution into a number of parallel builds.  The build (without tests) is first done as part of a
  Docker image build.  Then containers are spun up for each module (or parts of a module, depending on configuration)
  and the tests run.  This can be run as a command line tool or via its maven plugin.</description>

  <modules>
    <module>core</module>
    <module>hive</module>
    <module>maven</module>
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <commons-cli.version>1.2</commons-cli.version>
    <commons-lang3.version>3.2</commons-lang3.version>
    <distribution.dir>dtest-core-${project.version}-bin</distribution.dir>
    <guava.version>19.0</guava.version>
    <jackson.version>2.9.5</jackson.version>
    <jersey.version>1.19</jersey.version>
    <jetty.version>9.3.8.v20160314</jetty.version>
    <junit.version>4.11</junit.version>
    <log4j2.version>2.10.0</log4j2.version>
    <maven.plugin.plugin.version>3.6.0</maven.plugin.plugin.version>
    <maven.assembly.plugin.version>2.3</maven.assembly.plugin.version>
    <slf4j.version>1.7.10</slf4j.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${commons-lang3.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <version>${log4j2.version}</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
        <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- stuff for compile phase -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
      <!-- stuff for test phase -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.21.0</version>
        <configuration>
          <workingDirectory>${project.build.directory}</workingDirectory>
          <systemPropertyVariables>
            <java.io.tmpdir>${project.build.directory}</java.io.tmpdir>
            <conf.dir>${project.build.directory}</conf.dir>
          </systemPropertyVariables>
          <reuseForks>false</reuseForks>
          <failIfNoTests>false</failIfNoTests>
        </configuration>
      </plugin>
      <!-- stuff for integration/verify phase -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.20.1</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <workingDirectory>${project.build.directory}</workingDirectory>
          <redirectTestOutputToFile>true</redirectTestOutputToFile>
          <reuseForks>false</reuseForks>
          <systemPropertyVariables>
            <java.io.tmpdir>${project.build.directory}</java.io.tmpdir>
            <dtest.home>${project.build.directory}/${distribution.dir}/dtest</dtest.home>
            <conf.dir>${project.build.directory}</conf.dir>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <!-- stuff for site lifecycle -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.7.1</version>
      </plugin>
    </plugins>
  </build>

  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.0.1</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-plugin-plugin</artifactId>
        <version>${maven.plugin.plugin.version}</version>
      </plugin>
    </plugins>
  </reporting>

  <distributionManagement>
    <site>
      <id>www.hortonworks.com</id>
      <url>https://nosuch</url>
    </site>
  </distributionManagement>

</project>
